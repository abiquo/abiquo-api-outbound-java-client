/**
 * The Abiquo Platform
 * Cloud management application for hybrid clouds
 * Copyright (C) 2008 - Abiquo Holdings S.L.
 *
 * This application is free software; you can redistribute it and/or
 * modify it under the terms of the GNU LESSER GENERAL PUBLIC
 * LICENSE as published by the Free Software Foundation under
 * version 3 of the License
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * LESSER GENERAL PUBLIC LICENSE v.3 for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
package com.abiquo.bond.plugins;

import java.util.Set;
import java.util.concurrent.LinkedBlockingQueue;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.abiquo.bond.api.annotations.HandleBackupVMEvent;
import com.abiquo.bond.api.event.BackupVMEvent;
import com.abiquo.bond.api.plugin.AbstractPlugin;
import com.abiquo.bond.api.plugin.BackupPluginInterface;
import com.abiquo.bond.api.plugin.PluginException;
import com.abiquo.bond.api.response.BackupResultsHandler;
import com.abiquo.bond.api.response.VMBackupStatusList;
import com.abiquo.bond.api.response.VMRestoreStatusList;

/**
 * A simple plugin example that receives only backup events generated by the Outbound API and just
 * outputs the specific class name of the BackupVMEvent instance.
 */
public class BackupEvents extends AbstractPlugin implements BackupPluginInterface
{
    public BackupEvents() throws Exception
    {
    }

    @HandleBackupVMEvent
    public void handleBackupEvent(final BackupVMEvent event)
    {
        System.out.println("BackupEvents: Received event of type " + event.getClass().getName());
    }

    @Override
    public String getName()
    {
        return "BackupEvents sample plugin";
    }

    @Override
    public String getThreadName()
    {
        return "ABQ_PLUGIN_BACKUP_EVENTS";
    }

    @Override
    public void startup() throws PluginException
    {
        System.out.println("BackupEvents:startup has been called");
    }

    /*
     * Simple example configuration that simple prints a message
     */
    public void configure()
    {
        System.out.println("BackupEvents:configure has been called");
    }

    @Override
    public BackupResultsHandler getResultsHandler() throws PluginException
    {
        return new SampleBackupResultsHandler();
    }
}

class SampleBackupResultsHandler implements BackupResultsHandler
{

    private final static Logger logger = LoggerFactory.getLogger(SampleBackupResultsHandler.class);

    @Override
    public void run()
    {
        logger.info("BackupEvents:SampleBackupResultsHandler:run has been called");
    }

    @Override
    public void setQueue(final LinkedBlockingQueue<VMBackupStatusList> queue)
    {
        logger.info("BackupEvents:SampleBackupResultsHandler:setQueue has been called");
    }

    @Override
    public void linkToVMCache(final Set<String> cache)
    {
        // We don't need the cache so just ignore it;
    }

    @Override
    public void setRestoreQueue(final LinkedBlockingQueue<VMRestoreStatusList> restoreQueue)
    {
        logger.info("BackupEvents:SampleBackupResultsHandler:setRestoreQueue has been called");

    }
}
